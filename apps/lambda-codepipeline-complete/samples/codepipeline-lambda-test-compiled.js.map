{"version":3,"sources":["codepipeline-lambda-test.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,MAAM,QAAQ,SAAR,CAAV;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;;AAEA,QAAQ,OAAR,GAAkB,UAAS,KAAT,EAAgB,OAAhB,EAAyB;;AAEvC,QAAI,eAAe,IAAI,IAAI,YAAR,EAAnB;;;AAGA,QAAI,QAAQ,MAAM,kBAAN,EAA0B,EAAtC;;;;AAIA,QAAI,MAAM,MAAM,kBAAN,EAA0B,IAA1B,CAA+B,mBAA/B,CAAmD,aAAnD,CAAiE,cAA3E;;;AAGA,QAAI,gBAAgB,UAAS,OAAT,EAAkB;AAClC,YAAI,SAAS;AACT,mBAAO;AADE,SAAb;AAGA,qBAAa,mBAAb,CAAiC,MAAjC,EAAyC,UAAS,GAAT,EAAc,IAAd,EAAoB;AACzD,gBAAG,GAAH,EAAQ;AACJ,wBAAQ,IAAR,CAAa,GAAb;AACH,aAFD,MAEO;AACH,wBAAQ,OAAR,CAAgB,OAAhB;AACH;AACJ,SAND;AAOH,KAXD;;;AAcA,QAAI,gBAAgB,UAAS,OAAT,EAAkB;AAClC,YAAI,SAAS;AACT,mBAAO,KADE;AAET,4BAAgB;AACZ,yBAAS,KAAK,SAAL,CAAe,OAAf,CADG;AAEZ,sBAAM,WAFM;AAGZ,qCAAqB,QAAQ;AAHjB;AAFP,SAAb;AAQA,qBAAa,mBAAb,CAAiC,MAAjC,EAAyC,UAAS,GAAT,EAAc,IAAd,EAAoB;AACzD,oBAAQ,IAAR,CAAa,OAAb;AACH,SAFD;AAGH,KAZD;;;AAeA,QAAG,CAAC,GAAD,IAAQ,IAAI,OAAJ,CAAY,SAAZ,MAA2B,CAAC,CAAvC,EAA0C;AACtC,sBAAc,kGAAd;AACA;AACH;;;;AAID,QAAI,UAAU,UAAS,GAAT,EAAc,QAAd,EAAwB;AAClC,YAAI,aAAa;AACb,kBAAM,EADO;AAEb,wBAAY,CAFC;AAGb,sBAAU,UAAS,MAAT,EAAiB;AACvB,uBAAO,KAAK,IAAL,CAAU,OAAV,CAAkB,MAAlB,IAA4B,CAAC,CAApC;AACH;AALY,SAAjB;AAOA,aAAK,GAAL,CAAS,GAAT,EAAc,UAAS,QAAT,EAAmB;AAC7B,uBAAW,IAAX,GAAkB,EAAlB;AACA,uBAAW,UAAX,GAAwB,SAAS,UAAjC;;AAEA,qBAAS,EAAT,CAAY,MAAZ,EAAoB,UAAU,KAAV,EAAiB;AACjC,2BAAW,IAAX,IAAmB,KAAnB;AACH,aAFD;;AAIA,qBAAS,EAAT,CAAY,KAAZ,EAAmB,YAAY;AAC3B,yBAAS,UAAT;AACH,aAFD;;AAIA,qBAAS,MAAT;AACH,SAbD,EAaG,EAbH,CAaM,OAbN,EAae,UAAS,KAAT,EAAgB;;AAE3B,0BAAc,KAAd;AACH,SAhBD;AAiBH,KAzBD;;AA2BA,YAAQ,GAAR,EAAa,UAAS,YAAT,EAAuB;AAChC,YAAI;;AAEA,mBAAO,aAAa,UAAb,KAA4B,GAAnC;;;AAGA,mBAAO,aAAa,QAAb,CAAsB,iBAAtB,CAAP;;;AAGA,0BAAc,eAAd;AACH,SATD,CASE,OAAO,EAAP,EAAW;;AAET,0BAAc,EAAd;AACH;AACJ,KAdD;AAeH,CA1FD","file":"codepipeline-lambda-test-compiled.js","sourcesContent":["var assert = require('assert');\nvar AWS = require('aws-sdk');\nvar http = require('http');\n\nexports.handler = function(event, context) {\n\n    var codepipeline = new AWS.CodePipeline();\n\n    // Retrieve the Job ID from the Lambda action\n    var jobId = event[\"CodePipeline.job\"].id;\n\n    // Retrieve the value of UserParameters from the Lambda action configuration in AWS CodePipeline, in this case a URL which will be\n    // health checked by this function.\n    var url = event[\"CodePipeline.job\"].data.actionConfiguration.configuration.UserParameters;\n\n    // Notify AWS CodePipeline of a successful job\n    var putJobSuccess = function(message) {\n        var params = {\n            jobId: jobId\n        };\n        codepipeline.putJobSuccessResult(params, function(err, data) {\n            if(err) {\n                context.fail(err);\n            } else {\n                context.succeed(message);\n            }\n        });\n    };\n\n    // Notify AWS CodePipeline of a failed job\n    var putJobFailure = function(message) {\n        var params = {\n            jobId: jobId,\n            failureDetails: {\n                message: JSON.stringify(message),\n                type: 'JobFailed',\n                externalExecutionId: context.invokeid\n            }\n        };\n        codepipeline.putJobFailureResult(params, function(err, data) {\n            context.fail(message);\n        });\n    };\n\n    // Validate the URL passed in UserParameters\n    if(!url || url.indexOf('http://') === -1) {\n        putJobFailure('The UserParameters field must contain a valid URL address to test, including http:// or https://');\n        return;\n    }\n\n    // Helper function to make a HTTP GET request to the page.\n    // The helper will test the response and succeed or fail the job accordingly \n    var getPage = function(url, callback) {\n        var pageObject = {\n            body: '',\n            statusCode: 0,\n            contains: function(search) {\n                return this.body.indexOf(search) > -1;\n            }\n        };\n        http.get(url, function(response) {\n            pageObject.body = '';\n            pageObject.statusCode = response.statusCode;\n\n            response.on('data', function (chunk) {\n                pageObject.body += chunk;\n            });\n\n            response.on('end', function () {\n                callback(pageObject);\n            });\n\n            response.resume();\n        }).on('error', function(error) {\n            // Fail the job if our request failed\n            putJobFailure(error);\n        });\n    };\n\n    getPage(url, function(returnedPage) {\n        try {\n            // Check if the HTTP response has a 200 status\n            assert(returnedPage.statusCode === 200);\n            // Check if the page contains the text \"Congratulations\"\n            // You can change this to check for different text, or add other tests as required\n            assert(returnedPage.contains('Congratulations'));\n\n            // Succeed the job\n            putJobSuccess(\"Tests passed.\");\n        } catch (ex) {\n            // If any of the assertions failed then fail the job\n            putJobFailure(ex);\n        }\n    });\n};"]}