{"version":3,"sources":["index.js"],"names":[],"mappings":"AAAA,IAAI,SAAS,QAAQ,QAAR,CAAb;AACA,IAAI,MAAM,QAAQ,SAAR,CAAV;AACA,IAAI,OAAO,QAAQ,MAAR,CAAX;AACA,IAAI,IAAI,QAAQ,QAAR,CAAR;;AAEA,IAAI,MAAJ,CAAW,MAAX,CAAkB,EAAC,QAAQ,WAAT,EAAlB;;AAEA,QAAQ,OAAR,GAAkB,UAAS,KAAT,EAAgB,OAAhB,EAAyB;;AAEvC,YAAQ,GAAR,CAAY,2BAAZ;;AAEA,QAAI,eAAe,IAAI,IAAI,YAAR,EAAnB;;;AAGA,QAAI,QAAQ,MAAM,kBAAN,EAA0B,EAAtC;;;;AAIA,QAAI,MAAM,mBAAV,C;;;AAGA,QAAI,gBAAgB,UAAS,OAAT,EAAkB;AAClC,YAAI,SAAS;AACT,mBAAO;AADE,SAAb;AAGA,qBAAa,mBAAb,CAAiC,MAAjC,EAAyC,UAAS,GAAT,EAAc,IAAd,EAAoB;AACzD,gBAAG,GAAH,EAAQ;AACJ,wBAAQ,IAAR,CAAa,GAAb;AACH,aAFD,MAEO;AACH,wBAAQ,OAAR,CAAgB,OAAhB;AACH;AACJ,SAND;AAOH,KAXD;;;AAcA,QAAI,gBAAgB,UAAS,OAAT,EAAkB;AAClC,YAAI,SAAS;AACT,mBAAO,KADE;AAET,4BAAgB;AACZ,yBAAS,KAAK,SAAL,CAAe,OAAf,CADG;AAEZ,sBAAM,WAFM;AAGZ,qCAAqB,QAAQ;AAHjB;AAFP,SAAb;AAQA,qBAAa,mBAAb,CAAiC,MAAjC,EAAyC,UAAS,GAAT,EAAc,IAAd,EAAoB;AACzD,oBAAQ,IAAR,CAAa,OAAb;AACH,SAFD;AAGH,KAZD;;;AAeA,QAAG,CAAC,GAAD,IAAQ,IAAI,OAAJ,CAAY,SAAZ,MAA2B,CAAC,CAAvC,EAA0C;AACtC,sBAAc,kGAAd;AACA;AACH;;;;AAID,QAAI,eAAe,UAAS,GAAT,EAAc,QAAd,EAAwB;AACvC,YAAI,OAAO,OAAX;AACA,gBAAQ,GAAR,CAAY,uBAAZ;;AAEA,YAAI,YAAY,IAAI,IAAI,QAAJ,CAAa,cAAjB,EAAhB;;AAEA,YAAI,YAAY,kBAAhB;;AAEA,YAAI,IAAI,IAAI,IAAJ,EAAR;AACA,YAAI,OAAO,EAAE,WAAF,EAAX;AACA,YAAI,UAAU,YAAd;AACA,YAAI,cAAc,EAAE,MAAF,CAAS,GAAT,CAAlB;;;AAIA,YAAI,SAAS;AACT,uBAAY,SADH;AAET,kBAAM;AACF,oBAAI,KADF;AAEF,sBAAM,IAFJ;AAGF,yBAAS,OAHP;AAIF,gCAAgB;AAJd;AAFG,SAAb;;;AAWA,gBAAQ,GAAR,CAAY,mBAAZ;AACA,kBAAU,GAAV,CAAc,MAAd,EAAsB,UAAS,GAAT,EAAc,IAAd,EAAoB;AACtC,gBAAI,GAAJ,EAAS;AACL,wBAAQ,GAAR,CAAY,cAAZ;AACA,wBAAQ,GAAR,CAAY,GAAZ;AACH,aAHD,MAIK;AACD,wBAAQ,GAAR,CAAY,gBAAZ;AACA,wBAAQ,GAAR,CAAY,IAAZ;AACH;AACJ,SATD;;AAWA,gBAAQ,GAAR,CAAY,yCAAZ;;AAEA,iBAAS,IAAT;AACH,KAzCD;;AA2CA,iBAAa,GAAb,EAAkB,UAAS,SAAT,EAAoB;AAClC,YAAI;;AAEA,oBAAQ,GAAR,CAAY,uBAAZ;AACA,0BAAc,SAAd;AACH,SAJD,CAIE,OAAO,EAAP,EAAW;;AAET,oBAAQ,GAAR,CAAY,uBAAZ;AACA,0BAAc,EAAd;AACH;AACJ,KAVD;AAWH,CAxGD","file":"index-compiled.js","sourcesContent":["var assert = require('assert');\nvar AWS = require('aws-sdk');\nvar http = require('http');\nvar _ = require('lodash');\n\nAWS.config.update({region: \"us-east-1\"});\n\nexports.handler = function(event, context) {\n\n    console.log(\"BEGIN LAMBDA-CODEPIPELINE\");\n\n    var codepipeline = new AWS.CodePipeline();\n\n    // Retrieve the Job ID from the Lambda action\n    var jobId = event[\"CodePipeline.job\"].id;\n\n    // Retrieve the value of UserParameters from the Lambda action configuration in AWS CodePipeline, in this case a URL which will be\n    // health checked by this function.\n    var url = \"http://google.com\"; //event[\"CodePipeline.job\"].data.actionConfiguration.configuration.UserParameters;\n\n    // Notify AWS CodePipeline of a successful job\n    var putJobSuccess = function(message) {\n        var params = {\n            jobId: jobId\n        };\n        codepipeline.putJobSuccessResult(params, function(err, data) {\n            if(err) {\n                context.fail(err);\n            } else {\n                context.succeed(message);\n            }\n        });\n    };\n\n    // Notify AWS CodePipeline of a failed job\n    var putJobFailure = function(message) {\n        var params = {\n            jobId: jobId,\n            failureDetails: {\n                message: JSON.stringify(message),\n                type: 'JobFailed',\n                externalExecutionId: context.invokeid\n            }\n        };\n        codepipeline.putJobFailureResult(params, function(err, data) {\n            context.fail(message);\n        });\n    };\n\n    // Validate the URL passed in UserParameters\n    if(!url || url.indexOf('http://') === -1) {\n        putJobFailure('The UserParameters field must contain a valid URL address to test, including http:// or https://');\n        return;\n    }\n\n    // Helper function to make a HTTP GET request to the page.\n    // The helper will test the response and succeed or fail the job accordingly\n    var dynamoUpdate = function(url, callback) {\n        var text = \"hello\";\n        console.log(\"BEGIN GET PAGE HELPER\");\n\n        var docClient = new AWS.DynamoDB.DocumentClient();\n\n        var tableName = 'testResultsTable';\n\n        var d = new Date();\n        var date = d.toUTCString();\n        var harness = 'regression';\n        var passpercent = _.random(100);\n\n\n        //TODO get test results from CCAT Dynamo\n        var params = {\n            TableName : tableName,\n            Item: {\n                id: jobId,\n                date: date,\n                harness: harness,\n                passpercentage: passpercent\n            }\n        };\n\n        //this call will complete after the pipeline callback reports success, which is ok\n        console.log(\"BEGIN DYNAMO CALL\");\n        docClient.put(params, function(err, data) {\n            if (err) {\n                console.log(\"DYNAMO ERROR\");\n                console.log(err)\n            }\n            else {\n                console.log(\"DYNAMO SUCCESS\");\n                console.log(data);\n            };\n        });\n\n        console.log(\"END GET PAGE HELPER.  CALL THE CALLBACK\");\n\n        callback(text);\n    };\n\n    dynamoUpdate(url, function(finalText) {\n        try {\n            // Succeed the job\n            console.log(\"BEGIN PUT-JOB-SUCCESS\");\n            putJobSuccess(finalText);\n        } catch (ex) {\n            // If any of the assertions failed then fail the job\n            console.log(\"BEGIN PUT-JOB-FAILURE\");\n            putJobFailure(ex);\n        }\n    });\n};"]}