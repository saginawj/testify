{"version":3,"sources":["index.js"],"names":[],"mappings":"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","file":"index-compiled.js","sourcesContent":["/**\n * To update this later.\n *\n * Examples:\n * One-shot model:\n *  User: \"Alexa, ask Testify to ...\"\n */\n\nvar _ = require('lodash');\n\n//TODO: Move APP_ID to configdata.json file\nvar APP_ID = \"amzn1.echo-sdk-ams.app.2e216a09-3941-4ffc-b8ff-7ad544764bf1\";\n\nvar AWS = require('aws-sdk');\nAWS.config.update({region:'us-east-1'});\n\n//TODO: remove default strings and events\nvar MY_FACTS = [\n    \"This is Fact 1.\",\n    \"This is Fact 2.\",\n    \"This is Fact 3.\"\n];\n\n/**\n * The AlexaSkill prototype and helper functions\n */\nvar AlexaSkill = require('./AlexaSkill');\n\nvar Testify = function () {\n    AlexaSkill.call(this, APP_ID);\n};\n\n// Extend AlexaSkill\nTestify.prototype = Object.create(AlexaSkill.prototype);\nTestify.prototype.constructor = Testify;\n\nTestify.prototype.eventHandlers.onSessionStarted = function (sessionStartedRequest, session) {\n    console.log(\"Testify onSessionStarted requestId: \" + sessionStartedRequest.requestId\n        + \", sessionId: \" + session.sessionId);\n    // any initialization logic goes here\n};\n\nTestify.prototype.eventHandlers.onLaunch = function (launchRequest, session, response) {\n    console.log(\"AnimalFacts onLaunch requestId: \" + launchRequest.requestId + \", sessionId: \" + session.sessionId);\n    handleNewFactRequest(response);\n    //Additional Handlers\n    handleStartTestingRequest(response);\n    handleCheckTestingStatusRequest(response);\n};\n\n/**\n * Overridden to show that a subclass can override this function to teardown session state.\n */\nTestify.prototype.eventHandlers.onSessionEnded = function (sessionEndedRequest, session) {\n    console.log(\"AnimalFacts onSessionEnded requestId: \" + sessionEndedRequest.requestId\n        + \", sessionId: \" + session.sessionId);\n    // any cleanup logic goes here\n};\n\nTestify.prototype.intentHandlers = {\n    \"GetNewFactIntent\": function (intent, session, response) {\n        handleNewFactRequest(response);\n    },\n\n    //adding second event handler\n    \"StartTestingIntent\": function (intent, session, response) {\n        handleStartTestingRequest(response);\n    },\n    //adding third event handler\n    \"CheckTestingStatusIntent\": function (intent, session, response) {\n        handleCheckTestingStatusRequest(response);\n    },\n\n    \"AMAZON.HelpIntent\": function (intent, session, response) {\n        response.ask(\"You can ask Testify to test my code, or provide the status of the last deployment. Or, you can say exit... What can I help you with?\", \"What can I help you with?\");\n    },\n\n    \"AMAZON.StopIntent\": function (intent, session, response) {\n        var speechOutput = \"Goodbye\";\n        response.tell(speechOutput);\n    },\n\n    \"AMAZON.CancelIntent\": function (intent, session, response) {\n        var speechOutput = \"Goodbye\";\n        response.tell(speechOutput);\n    }\n};\n\n/**\n * Gets a random new fact from the list and returns to the user.\n */\nfunction handleNewFactRequest(response) {\n    // Get a random animal fact from the animals facts list\n    var factIndex = Math.floor(Math.random() * MY_FACTS.length);\n    var fact = MY_FACTS[factIndex];\n\n    // Create speech output\n    var speechOutput = \"Here's your animal fact: \" + fact;\n\n    console.log(\"Fact:  \" + fact);\n\n    response.tellWithCard(speechOutput, \"AnimalFacts\", speechOutput);\n}\n\n//This will eventually kickoff the Code Deployment\n//TODO change logic to kick off CodePipeline\nfunction handleStartTestingRequest(response) {\n\n    console.log(\"START handleStartTestingRequest\");\n\n    // Create speech output\n    var speechOutput = \"Kicking off the testing pipeline now.\";\n\n    //TODO code extracted to codePipelineHelper\n    var codepipeline = new AWS.CodePipeline();\n    var pipelineName = \"testify-newPipeline\";\n\n    var params = {\n        name: pipelineName\n    };\n\n    console.log(\"Execute Start Pipleine\");\n    codepipeline.startPipelineExecution(params, function(err, data) {\n        if (err){\n            console.log(\"CODE PIPELINE FAILED:  \", pipelineName);\n            console.log(err, err.stack);\n        }\n        else{\n            console.log(\"CODE PIPELINE SUCCESS:  \", pipelineName);\n            console.log(data);\n            console.log(speechOutput);\n            response.tellWithCard(speechOutput, \"Testify\", speechOutput);\n        }\n    });\n\n    //moving these into above\n    //console.log(speechOutput);\n    //response.tellWithCard(speechOutput, \"Testify\", speechOutput);\n}\n\n//TODO move Dynamo code to dynamohelper\nfunction handleCheckTestingStatusRequest(response) {\n\n    //for Alexa\n    var speechOutput = undefined;\n\n    //for Dynamo\n    var docClient = new AWS.DynamoDB.DocumentClient();\n    var tableName = 'testResultsTable';\n    var params = {\n        TableName : tableName\n    };\n\n    docClient.scan(params, function dynamoScanResponse(err, data) {\n        if (err) console.log(err);\n        else {\n            //TODO update to get last date based on Sort Key in new table\n            console.log(data.Items);\n\n            var a = _.maxBy(data.Items, function(o){return o.date});\n\n            var date = a.date;\n            var id = a.id;\n            var harness = a.harness;\n            var passpercentage = a.passpercentage;\n\n\n            /*\n            //var count = data.Items.length -1;\n            //var date = data.Items[count].date;\n            //var id = data.Items[count].id;\n            //var harness = data.Items[count].harness;\n            //var passpercentage = data.Items[count].passpercentage;\n            */\n\n            //console.log(data);\n            console.log(\"Date: \", date);\n            console.log(\"ID: \", id);\n\n            speechOutput = \"Here's your test results:   On \" + date  + \", the \" + harness + \" harness had a pass percentage of \" + passpercentage;\n            console.log(\"SPEECH OUTPUT:  \" + speechOutput);\n            response.tellWithCard(speechOutput, \"Testify\", speechOutput);\n        }\n    });\n\n\n    /*\n    //this code needs to be executed after getting the date of the latst record from the scan\n    var speechOutput = undefined;\n    params = {};\n    params.TableName = \"testResultsTable\";\n    params.Key = {id : \"1010\"};\n    theAnswer = \"\";\n\n    docClient.get(params, function(err, data) {\n        if (err) {\n            console.log(\"GetItem Error\");\n            console.log(err)\n            speechOutput = \"Sorry, I had trouble pulling the resuilts.  You'll need to check the old fashion way.  With your eyes\";\n            response.tellWithCard(speechOutput, \"Testify\", speechOutput);\n        }\n        else {\n            console.log(\"Dynamo Get Successful.  Data Below\");\n            console.log(data);\n\n            var passPercentage  = data.Item.passpercentage;\n            var date            = data.Item.date;\n            var harness         = data.Item.harness;\n\n            speechOutput = \"Here's your test resuilts:   On \" + date  + \", the \" + harness + \" harness had a pass percentage of \" + passPercentage;\n            console.log(\"SPEECH OUTPUT:  \" + speechOutput);\n            response.tellWithCard(speechOutput, \"Testify\", speechOutput);\n        }\n    });\n    */\n}\n\n\n\n// Create the handler that responds to the Alexa Request.\nexports.handler = function (event, context) {\n    // Create an instance of the Testify skill.\n    var testify = new Testify();\n    testify.execute(event, context);\n};\n\n"]}